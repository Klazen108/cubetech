<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frozen = false; //sets if the player can move or not

jump = 8.5 * global.grav; //set how fast the player jumps
jump2 = 7 * global.grav; //sets how fast the player double jumps
gravity = 0.4 * global.grav; //player gravity

djump = 1; //allow the player to double jump as soon as he spawns
maxSpeed = 3;   //max horizontal speed
maxVspeed = 9;  //max vertical speed
image_speed = 0.2; //initial speed of animation
onPlatform = false; //sets if player is currently standing on a platform

xScale = 1; //sets the direction the player is facing (1 is facing right, -1 is facing left)

scrSetPlayerMask(); //set the player's hitbox

if (global.difficulty == 0 &amp;&amp; global.gameStarted)   //create the player's bow
    instance_create(x,y,objBow);

if (global.autosave) //save the game if currently set to autosave
{
    scrSaveGame(true);
    global.autosave = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//when the player is destroyed, also destroy the bow
with (objBow)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if ((x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height) &amp;&amp; global.edgeDeath)  //check if player has left the room
//    scrKillPlayer();

if (x&lt;0) x+=room_width;
if (x&gt;room_width) x-=room_width;

//TESTING
if (keyboard_check_direct(vk_space)) {
    x=xprevious;
    y=yprevious;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check button presses
var L, R;
if (!global.invert) L = scrButtonCheck(global.leftButton);
else                L = scrButtonCheck(global.rightButton);
if (!global.invert) R = scrButtonCheck(global.rightButton);
else                R = scrButtonCheck(global.leftButton);
var h = 0;

var slipBlockTouching;
var notOnBlock;
var onVineL;
var onVineR;

if (!frozen)    //don't move if frozen
{
    if (R)
        h = 1;
    else if (L)
        h = -1;
}

//vine checks
if isVGrav() {
    slipBlockTouching = instance_place(x,y+(4*global.grav),objSlipBlock);   //check if near a slip block
    notOnBlock = (place_free(x,y+(global.grav)));
    onVineL = (place_meeting(x-1,y,objWalljumpL) &amp;&amp; notOnBlock);
    onVineR = (place_meeting(x+1,y,objWalljumpR) &amp;&amp; notOnBlock);
} else {
    slipBlockTouching = instance_place(x+(4*global.grav/2),y,objSlipBlock);   //check if near a slip block
    notOnBlock = (place_free(x+(global.grav/2),y));
    onVineL = (place_meeting(x,y-1,objWalljumpL) &amp;&amp; notOnBlock);
    onVineR = (place_meeting(x,y+1,objWalljumpR) &amp;&amp; notOnBlock);
}

if (h != 0)  //player is moving
{
    if (!onVineR &amp;&amp; !onVineL)   //make sure not currently touching a vine
    {
        xScale = h;
    }
    if ((h == -1 &amp;&amp; !onVineR) || (h == 1 &amp;&amp; !onVineL))
    {
        if (slipBlockTouching == noone) //not touching a slip block, move immediately at full speed
            if isVGrav() hspeed = maxSpeed * h;
            else vspeed = maxSpeed * h;
        else    //touching a slip block, use acceleration
        {
            if isVGrav() {
                if ((h == 1 &amp;&amp; hspeed &lt; maxSpeed) || (h == -1 &amp;&amp; hspeed &gt; -maxSpeed))
                    hspeed += (slipBlockTouching.slip) * h;
            } else {
                if ((h == 1 &amp;&amp; vspeed &lt; maxSpeed) || (h == -1 &amp;&amp; vspeed &gt; -maxSpeed))
                    vspeed += (slipBlockTouching.slip) * h;
            }
        }
        
        sprite_index = sprPlayerRunning;
        image_speed = 0.5;
    }
}
else    //player is not moving
{
    if (slipBlockTouching == noone) //not touching a slip block, stop immediately
        if isVGrav() hspeed = 0; else vspeed = 0;
    else    //touching a slip block, slow down
    {
        if isVGrav() {
            if (hspeed &gt; 0)
            {
                hspeed -= slipBlockTouching.slip;
                
                if (hspeed &lt;= 0)
                    hspeed = 0;
            }
            else if (hspeed &lt; 0)
            {
                hspeed += slipBlockTouching.slip;
                
                if (hspeed &gt;= 0)
                    hspeed = 0;
            }
        } else {
            if (vspeed &gt; 0)
            {
                vspeed -= slipBlockTouching.slip;
                
                if (vspeed &lt;= 0)
                    vspeed = 0;
            }
            else if (vspeed &lt; 0)
            {
                vspeed += slipBlockTouching.slip;
                
                if (vspeed &gt;= 0)
                    vspeed = 0;
            }
        }
    }
  
    sprite_index = sprPlayerIdle;
    image_speed = 0.2;
}


if (!onPlatform)    //check if standing on a platform
{
    if (isVGrav()) {
        if((vspeed * global.grav) &lt; -0.05) {sprite_index = sprPlayerJump;}
        else if((vspeed * global.grav) &gt; 0.05) {sprite_index = sprPlayerFall;}
    } else {
        if((hspeed * global.grav/2) &lt; -0.05) {sprite_index = sprPlayerJump;}
        else if((hspeed * global.grav/2) &gt; 0.05) {sprite_index = sprPlayerFall;}
    }
}
else
{
    if isVGrav() {if (!place_meeting(x,y+(4*global.grav),objPlatform)) {onPlatform = false;}}
    else {if (!place_meeting(x+(4*global.grav/2),y,objPlatform)) {onPlatform = false;}}
}

var slideBlockTouching;
if isVGrav() slideBlockTouching = instance_place(x,y+global.grav,objSlideBlock);   //check if on a slide block
else slideBlockTouching = instance_place(x+global.grav/2,y,objSlideBlock);   //check if on a slide block

if isVGrav()
    if (slideBlockTouching != noone)    //on a slide block, start moving with it
        hspeed += slideBlockTouching.h;
else 
    if (slideBlockTouching != noone)    //on a slide block, start moving with it
        vspeed += slideBlockTouching.v;

if isVGrav() {if (abs(vspeed) &gt; maxVspeed) {vspeed = sign(vspeed)*maxVspeed;}} //check if moving vertically faster than max speed
else {if (abs(hspeed) &gt; maxVspeed) {hspeed = sign(hspeed)*maxVspeed;}} //check if moving vertically faster than max speed

if (!frozen)    //check if frozen before doing anything
{
    if (scrButtonCheckPressed(global.shootButton))
        scrPlayerShoot();
    if (scrButtonCheckPressed(global.jumpButton))
        scrPlayerJump();
    if (scrButtonCheckReleased(global.jumpButton))
        scrPlayerVJump();
    if (scrButtonCheckPressed(global.suicideButton))
        scrKillPlayer();
}
/*
if (global.adAlign &amp;&amp; place_meeting(x,y+(global.grav),objBlock) &amp;&amp; !frozen)  // A/D align
{
    if (scrButtonCheckPressed(global.alignLeftButton)) {hspeed -= 1;}
    if (scrButtonCheckPressed(global.alignRightButton)) {hspeed += 1;}
}*/

//walljumps

if (onVineL || onVineR)
{
    if (onVineR)
        xScale = -1;
    else
        xScale = 1;
    
    if isVGrav() vspeed = 2 * global.grav;
    else hspeed = 2 * global.grav/2;
    sprite_index = sprPlayerSliding;
    image_speed = 1/2;
    
    //pressed away from the vine
    if (onVineL &amp;&amp; scrButtonCheckPressed(global.rightButton)) || (onVineR &amp;&amp; scrButtonCheckPressed(global.leftButton))
    {
        if (scrButtonCheck(global.jumpButton))  //jumping off vine
        {
            if (onVineR) {if isVGrav() hspeed = -15; else vspeed = -15}
            else {if isVGrav() hspeed = 15; else vspeed = 15}
            
            if isVGrav() vspeed = -9 * global.grav;
            else hspeed = -9 * global.grav/2;
            audio_play_sound(sndWallJump,0,false);
            sprite_index = sprPlayerJump;
        }
        else    //moving off vine
        {
            if (onVineR) {if isVGrav() hspeed = -3; else vspeed = -3;}
            else {if isVGrav() hspeed = 3; else vspeed = 3;}
            
            sprite_index = sprPlayerFall;
        }
    }
}

//slopes
/*
if (instance_exists(objSlope) &amp;&amp; hspeed != 0)
{
    var moveLimit = abs(hspeed);    //sets how high/low the player can go to snap onto a slope, this can be increased to make the player able to run over steeper slopes (ie setting it to abs(hspeed)*2 allows the player to run over slopes twice as steep)
    
    var slopeCheck;
    var hTest;
    
    var ySlope;
    
    //falling onto a slope
    if (place_meeting(x+hspeed,y+vspeed+gravity,objSlope) &amp;&amp; (vspeed+gravity)*global.grav &gt; 0 &amp;&amp; notOnBlock)
    {
        var xLast = x;
        var yLast = y;
        var hLast = hspeed;
        var vLast = vspeed;
        
        vspeed += gravity;
        
        x += hspeed;
        hspeed = 0;
        
        if(!place_free(x,y+vspeed))
        {
            if (global.grav == 1)   //normal
                move_contact_solid(270,abs(vspeed));
            else    //flipped
                move_contact_solid(90,abs(vspeed));
            vspeed = 0;
        }
        
        y += vspeed;            
        
        if (!place_free(x,y+(global.grav)) &amp;&amp; place_free(x,y))  //snapped onto the slope properly
        {
            djump = 1;
            notOnBlock = false;
        }
        else    //did not snap onto the slope, return to previous position
        {
            x = xLast;
            y = yLast;
            hspeed = hLast;
            vspeed = vLast;
        }
    }
    
    //moving down a slope
    if (!notOnBlock)
    {
        var onSlope = (place_meeting(x,y+(global.grav),objSlope));    //treat normal blocks the same as slopes if we're standing on a slope
        
        slopeCheck = true;
        hTest = hspeed;
        
        while (slopeCheck)
        {
            ySlope = 0;
            //check how far we should move down
            while ((!place_meeting(x+hTest,y-ySlope+(global.grav),objSlope) || (onSlope &amp;&amp; !place_meeting(x+hTest,y-ySlope+(global.grav),objBlock))) &amp;&amp; ySlope*global.grav &gt; -floor(moveLimit*(hTest/hspeed)))
            {
                ySlope -= global.grav;
            }
            
            //check if we actually need to move down
            if (place_meeting(x+hTest,y-ySlope+(global.grav),objSlope) || (onSlope &amp;&amp; place_meeting(x+hTest,y-ySlope+(global.grav),objBlock)))
            {
                if (ySlope != 0 &amp;&amp; !place_meeting(x+hTest,y-ySlope,objBlock))
                {
                    y -= ySlope;
                    
                    x += hTest;
                    hspeed = 0;
                    
                    slopeCheck = false;
                }
                else
                {
                    if (hTest &gt; 0)
                    {
                        hTest -= 1;
                        if (hTest &lt;= 0)
                            slopeCheck = false;
                    }
                    else if (hTest &lt; 0)
                    {
                        hTest += 1;
                        if (hTest &gt;= 0)
                            slopeCheck = false;
                    }
                    else
                    {
                        slopeCheck = false;
                    }
                }
            }
            else
            {
                slopeCheck = false;
            }
        }
    }
    
    //moving up a slope
    if (place_meeting(x+hspeed,y,objSlope))
    {
        slopeCheck = true;
        hTest = hspeed;
        
        while (slopeCheck)
        {
            ySlope = 0;
            
            //check how far we have to move up
            while (place_meeting(x+hTest,y-ySlope,objSlope) &amp;&amp; ySlope*global.grav &lt; floor(moveLimit*(hTest/hspeed)))
            {
                ySlope += global.grav;
            }
            
            //check if we actually need to move up
            if (place_free(x+hTest,y-ySlope))
            {            
                y -= ySlope;
                
                x += hTest;
                hspeed = 0;
                
                slopeCheck = false;
            }
            else
            {
                if (hTest &gt; 0)
                {
                    hTest -= 1;
                    if (hTest &lt;= 0)
                        slopeCheck = false;
                }
                else if (hTest &lt; 0)
                {
                    hTest += 1;
                    if (hTest &gt;= 0)
                        slopeCheck = false;
                }
                else
                {
                    slopeCheck = false;
                }
            }
        }
    }
    
    //set xprevious/yprevious coordinates for future solid collisions
    xprevious = x;
    yprevious = y;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayerKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.grav == 1)   //normal
{
    if (y-vspeed/2 &lt;= other.y)
    {
        if (other.vspeed &gt;= 0)
        {
            y = other.y-9;
            vspeed = other.vspeed;
        }
        
        onPlatform = true;
        djump = 1;
    }
}
else if (global.grav == -1) //flipped
{
    if (y-vspeed/2 &gt;= other.y+other.sprite_height-1)
    {
        if (other.yspeed &lt;= 0)
        {
            y = other.y+other.sprite_height+8;
            vspeed = other.yspeed;
        }
        
        onPlatform = true;
        djump = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if isVGrav() {
    if (!place_free(x+hspeed,y))
    {
        if (global.grav == 1)      //normal
        {
            if(hspeed &lt;= 0){move_contact_solid(180,abs(hspeed));}
            if(hspeed &gt; 0){move_contact_solid(0,abs(hspeed));}
        }
        else if (global.grav == -1)//flipped
        {
            if(hspeed &lt; 0){move_contact_solid(180,abs(hspeed));}
            if(hspeed &gt;= 0){move_contact_solid(0,abs(hspeed));}
        }
        hspeed = 0;
    }
     
    if (!place_free(x,y+vspeed))
    {
        if (global.grav == 1)      //normal
        {
            if(vspeed &lt;= 0){move_contact_solid(90,abs(vspeed));}
            if(vspeed &gt; 0){move_contact_solid(270,abs(vspeed));djump=1;}
        }
        else if (global.grav == -1)//flipped
        {
            if(vspeed &lt;= 0){move_contact_solid(90,abs(vspeed));djump=1;}
            if(vspeed &gt; 0){move_contact_solid(270,abs(vspeed));}
        }
        vspeed = 0;
    }
    
    if (!place_free(x+hspeed,y+vspeed)) {hspeed = 0;}
} else {
    if (!place_free(x,y+vspeed))
    {
        if (global.grav == 2)      //normal
        {
            if(vspeed &lt;= 0){move_contact_solid(90,abs(vspeed));}
            if(vspeed &gt; 0){move_contact_solid(270,abs(vspeed));}
        }
        else if (global.grav == -2)//flipped
        {
            if(vspeed &lt; 0){move_contact_solid(90,abs(vspeed));}
            if(vspeed &gt;= 0){move_contact_solid(270,abs(vspeed));}
        }
        vspeed = 0;
    }
     
    if (!place_free(x+hspeed,y))
    {
        if (global.grav == 2)      //normal
        {
            if(hspeed &lt;= 0){move_contact_solid(180,abs(hspeed));}
            if(hspeed &gt; 0){move_contact_solid(0,abs(hspeed));djump=1;}
        }
        else if (global.grav == -2)//flipped
        {
            if(hspeed &lt;= 0){move_contact_solid(180,abs(hspeed));djump=1;}
            if(hspeed &gt; 0){move_contact_solid(0,abs(hspeed));}
        }
        hspeed = 0;
    }
    
    if (!place_free(x+hspeed,y+vspeed)) {vspeed = 0;}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the player

var drawX = x;
var drawY = y;

if isVGrav() {
    if (global.grav == -1)  drawY += 1;
    draw_sprite_ext(sprite_index,image_index,drawX,drawY,image_xscale*xScale,image_yscale*global.grav,image_angle,image_blend,image_alpha);
} else {
    if (global.grav == -2)  drawX += 1;
    draw_sprite_ext(sprite_index,image_index,drawX,drawY,image_xscale*(-1*xScale),image_yscale*global.grav/2,image_angle+90,image_blend,image_alpha);
}

//draw the player's hitbox
if (global.showHitbox)
    draw_sprite_ext(mask_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha*0.8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSetGrav(scrRotateGravity(global.grav,270));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSetGrav(scrRotateGravity(global.grav,180));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSetGrav(scrRotateGravity(global.grav,90));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSetGrav(scrRotateGravity(global.grav,0));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
